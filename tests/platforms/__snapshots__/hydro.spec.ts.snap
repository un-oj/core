// Bun Snapshot v1, https://goo.gl/fbAQLP

exports[`Hydro platform should fetch problem 1`] = `
{
  "description": 
"## 题目描述

输入 $a$ 和 $b$，输出 $a + b$ 的结果。

## 输入格式

一行两个正整数 $a$ 和 $b$ 。

## 输出格式

一行一个正整数 $a + b$。

\`\`\`input1
1 2
\`\`\`

\`\`\`output1
3
\`\`\`

\`\`\`input2
3 4
\`\`\`

\`\`\`output2
7
\`\`\`

## 数据规模与约定

对于 $100\\%$ 的数据，$a, b \\leq 10 ^ 6$。

"
,
  "difficulty": 1,
  "id": "H1000",
  "link": "https://hydro.ac/p/H1000",
  "memoryLimit": 1073741824,
  "samples": [
    {
      "input": "1 2",
      "output": "3",
    },
    {
      "input": "3 4",
      "output": "7",
    },
  ],
  "tags": [
    "系统测试",
  ],
  "timeLimit": 1000,
  "title": "A + B Problem",
  "type": "traditional",
}
`;

exports[`Hydro platform should fetch interactive problem 1`] = `
{
  "description": 
"## 题目背景
**本题为 IO 交互题。**

## 题目描述
Dream 将 Tommy 的所有音乐盘分为 $n$ 类，其中第 $i$ 类有 $2^m-1$ 片音乐盘。所有盘都有一个唯一的正整数重要度。  
现在 Dream 已经把所有类之内的音乐盘按照重要度递增排序。Dream 想知道**所有**盘中重要度第 $k$ 小是哪个盘。

由于音乐盘数量实在太多，Dream 不能直接给你所有音乐盘的重要度。在寻找答案时，Dream 允许你访问第 $i$ 类重要度第 $j$ 小的盘重要度值。

## 输入格式
交互开始时，评测机输入第一行为四个正整数 $n$，$m$，$k$，和 $Th$，其中 $Th$ 为最多应用访问次数。  
每一次访问，评测机会回复所访问位置的音乐盘重要度。

## 输出格式
你的程序可以进行两个操作：

 1. \`? i j\`，表示访问第 $i$ 类型第 $j$ 小音乐盘重要度。评测机会回复这位置重要度。
 2. \`! i j\`，表示报告全局第 $k$ 小音乐盘为第 $i$ 类的第 $j$ 小音乐盘。

\`\`\`input1
2 2 2 22

222
\`\`\`

\`\`\`output1

? 2 2

! 2 2
\`\`\`

## 说明/提示
#### 样例 1 解释

Dream 的音乐盘重要度为 $[[2222,22222,222222],[22,222,2222222]]$。  
第 2 类型为 $[22,222]$；第 2 类型的第 2 小重要度为 $222$。  
全局第 2 小重要度也是这音乐盘。

#### 数据规模与约定

**本题采用捆绑测试。**

|  Subtask | 分值 | $n$ | $m$ | $k$ | $Th$ |
| ----------- | ----------- | ----------- | ----------- | ----------- | ----------- |
| 1 | 1 pts | $1$ | $1$| $1$| $15,000$ |
| 2 | 9 pts | $50$ | $8$ | 无 | $15,000$ |
| 3 | 19 pts | $20$ | $11$ | 无 | $15,000$ |
| 4 | 17 pts | $50$ | $11$ | 无 | $6,666$ |
| 5 | 23 pts | $50$ | $11$ | 无 | $2,333$ |
| 6 | 31 pts | $50$ | $11$ | 无 | $1,111$ |

对于所有数据，$1\\le k\\le n(2^m-1)$，所有音乐盘的重要度互不相同并且小于等于 $10^{18}$。"
,
  "difficulty": undefined,
  "id": "H1026",
  "link": "https://hydro.ac/p/H1026",
  "memoryLimit": 268435456,
  "samples": [
    {
      "input": 
"2 2 2 22

222"
,
      "output": 
"? 2 2

! 2 2"
,
    },
  ],
  "tags": [
    "交互题",
  ],
  "timeLimit": 2000,
  "title": "「MCOI-07」Dream and More Discs",
  "type": "interactive",
}
`;

exports[`Hydro platform should fetch submission problem 1`] = `
{
  "description": 
"## 题目背景

**本题为提交答案题。**

请在右侧文件面板下载输入数据。

## 题目描述

Dream SMP 可以看做 $n$ 个编号为 $0,1,\\dots,n-1$ 的地区。

Dream 希望将这 $n$ 个地区划分为 $8$ 个编号为 $0,1,\\dots,7$ 的国家。每一个地区都所在恰好一个国家，但国家可以不包含任何地区。

地区提出 $m$ 组对划分方案的条件，其中第 $i$ 组条件用四个参数 $(u_i,a_i,v_i,b_i)$ 表示。某个划分方案合法当且仅当对所有条件，$u_i$ 号地区不属于 $a_i$ 号国家 **或者** $v_i$ 号地区不属于 $b_i$ 号国家。这里 **或者** 是逻辑或。

Dream 保证存在至少一个合法划分方案，请你构造一个合法划分方案。

## 输入格式

第一行两个正整数 $n$ 和 $m$。
接下来 $m$ 行，每行四个正整数 $u_i,a_i,v_i,b_i$。

## 输出格式

输出一个长度为 $n$ 的字符串。
字符串的第 $i$ 位为 $i$ 号地区所属的国家。


\`\`\`input1
5 600
0 5 1 4
2 3 2 2
0 4 0 4
1 7 4 7
4 6 1 3
4 2 2 4
2 3 0 7
0 3 2 1
4 4 2 1
2 3 0 6
4 5 0 3
1 2 4 6
2 0 1 4
1 6 2 3
2 2 0 6
4 3 1 7
3 6 2 5
3 0 2 6
3 7 1 7
1 2 2 2
1 7 3 7
2 6 4 2
3 0 2 3
1 1 2 0
2 1 2 3
0 5 3 3
4 0 1 1
0 5 3 7
2 6 0 4
3 1 4 3
1 1 2 5
3 6 0 2
0 4 3 1
1 7 2 4
3 4 3 3
1 0 3 7
3 5 0 2
0 4 0 1
3 0 3 6
4 2 0 5
3 3 1 7
1 5 2 3
4 5 0 0
3 0 1 5
1 5 0 3
2 0 2 1
2 6 3 6
2 4 3 2
1 2 2 5
2 1 0 5
1 2 4 1
2 7 4 6
0 5 0 6
3 6 2 2
1 7 1 7
0 1 4 4
1 6 0 2
1 6 1 0
1 4 0 7
0 7 4 5
0 4 2 1
3 7 0 7
3 0 2 1
3 3 3 6
0 2 1 0
0 6 2 2
4 1 2 0
2 7 1 6
1 0 2 1
4 3 3 0
0 7 3 5
1 3 3 5
3 0 4 0
4 6 1 4
2 3 2 7
1 0 3 2
0 3 3 7
0 2 1 2
3 1 0 6
0 1 2 7
3 4 3 0
4 7 3 6
2 5 4 3
3 4 0 7
2 0 0 2
1 4 1 6
0 7 0 3
2 4 2 4
2 2 2 1
4 2 0 4
2 7 3 4
4 6 0 6
2 4 0 4
2 2 1 1
4 7 0 1
4 0 1 0
1 1 1 1
3 4 2 4
0 4 1 0
0 0 0 3
3 3 2 5
1 0 4 0
3 3 2 1
3 7 4 6
0 1 1 2
3 4 0 3
1 1 2 7
2 7 1 7
1 5 4 4
4 4 3 0
2 2 0 3
0 1 0 6
1 2 2 0
0 4 0 5
3 0 0 2
3 6 2 7
1 4 2 1
1 6 3 7
3 1 2 5
2 0 1 3
1 6 3 6
2 1 0 4
4 5 3 5
4 4 3 2
2 5 2 1
3 6 1 0
4 4 0 3
2 0 0 7
2 4 1 4
3 4 2 0
3 6 0 7
0 5 1 5
0 3 0 1
1 2 3 0
0 1 2 4
4 5 2 7
1 5 4 0
0 4 2 3
0 7 3 1
2 5 0 1
3 1 2 3
2 6 2 5
2 1 3 2
3 1 2 6
0 2 4 5
2 7 4 1
0 0 4 7
1 6 1 7
4 4 3 7
1 5 3 7
2 3 0 5
3 0 1 4
3 0 4 6
2 5 4 2
2 7 2 3
0 1 2 6
1 7 0 2
1 1 4 6
3 0 0 4
2 5 3 0
4 6 0 0
2 4 2 3
0 3 4 1
4 5 4 5
1 5 4 3
0 5 4 1
0 3 0 4
4 5 3 0
3 2 1 4
2 6 2 2
0 6 3 6
4 2 1 0
2 1 2 0
3 4 4 7
2 1 2 1
0 5 2 4
2 7 4 3
4 7 1 6
3 6 0 3
0 1 3 4
2 6 2 4
2 2 2 3
4 5 1 5
1 4 0 6
2 6 4 1
2 0 2 7
4 5 2 4
2 7 4 4
3 7 3 2
2 5 1 2
0 2 4 1
4 7 3 4
0 1 1 3
4 1 1 6
1 1 1 4
2 7 1 2
1 4 0 0
2 0 4 2
0 3 2 7
2 5 2 6
0 5 4 4
4 0 2 3
2 4 0 3
4 5 2 1
4 4 4 0
2 5 3 6
3 1 4 5
1 6 4 7
0 2 3 4
0 1 4 7
1 5 3 4
0 6 1 0
2 7 2 2
0 4 2 4
4 2 2 7
4 5 2 3
0 3 1 1
0 3 4 0
0 4 2 7
0 3 2 0
3 0 1 7
0 1 1 1
3 4 0 4
2 3 1 6
4 4 0 2
4 2 2 5
4 4 4 5
1 1 2 4
1 1 0 1
0 7 2 5
0 5 1 3
3 2 4 6
4 0 0 4
3 1 3 2
2 3 1 2
0 1 1 5
4 5 3 7
2 0 3 3
0 2 0 3
1 5 3 1
1 4 2 4
1 5 1 1
1 0 1 4
0 7 2 1
0 5 0 2
3 4 1 3
1 7 3 0
3 3 4 5
3 5 4 2
3 4 3 6
3 4 3 7
3 4 3 4
1 7 2 3
4 4 4 2
1 7 4 4
1 3 1 6
4 3 4 2
1 5 2 1
1 5 2 2
2 5 4 5
1 5 2 4
3 6 0 5
3 2 0 6
4 4 1 4
4 0 4 0
0 4 4 3
2 4 3 5
4 1 3 6
2 4 4 3
4 3 2 0
3 5 3 1
1 7 0 6
0 2 4 7
3 0 0 3
1 4 0 2
4 5 1 7
3 1 0 4
0 1 0 2
4 1 1 3
0 3 3 3
2 2 4 2
4 3 4 1
4 5 2 0
1 6 2 6
1 1 2 1
4 6 2 2
1 7 2 0
0 4 3 0
0 3 2 5
2 2 3 0
3 6 2 3
0 7 3 3
0 5 0 4
3 7 1 5
4 5 0 5
4 1 0 4
1 7 0 7
3 4 1 7
0 0 2 5
1 3 3 0
2 1 3 0
2 6 0 3
0 5 1 7
0 6 1 6
1 1 0 5
2 7 2 5
0 3 4 5
4 0 3 1
3 2 1 0
2 6 0 2
1 4 3 7
1 6 2 5
1 4 4 4
3 5 4 4
1 1 4 3
2 1 1 3
4 2 1 7
4 6 1 0
1 0 3 4
1 1 3 1
1 6 0 6
3 7 1 1
0 0 2 4
4 0 1 5
0 2 2 2
2 0 1 5
1 0 4 5
3 0 1 2
0 1 0 1
0 3 0 2
4 7 3 2
4 4 3 3
1 5 4 7
2 2 0 2
2 4 0 7
4 1 1 4
4 5 4 2
4 4 1 1
1 7 1 2
3 2 3 5
3 6 1 7
4 1 2 2
1 1 3 5
3 1 2 4
3 1 4 0
4 6 0 5
1 5 3 5
3 1 2 1
3 0 3 4
4 4 4 4
1 5 1 0
4 0 4 3
1 4 3 3
4 7 4 0
4 5 4 1
1 5 3 2
0 6 0 1
0 6 3 7
1 3 1 4
4 0 1 4
2 1 3 3
4 1 2 6
1 0 1 3
4 7 0 4
0 0 0 0
2 5 1 0
2 3 0 0
1 6 1 2
0 2 0 5
3 7 4 5
2 3 1 4
2 3 3 1
0 2 3 1
4 7 3 0
4 5 4 0
3 3 4 7
3 4 0 2
2 7 4 2
3 0 4 7
3 0 0 0
0 4 4 7
1 4 3 5
1 1 4 2
2 3 1 0
1 0 0 2
1 1 1 0
3 5 4 3
0 6 4 3
4 4 0 5
4 4 1 0
4 3 1 2
2 4 4 0
0 5 4 0
0 0 4 1
4 2 3 7
4 5 2 5
3 7 1 4
2 1 0 6
3 1 0 5
1 3 2 7
1 3 4 7
1 4 2 5
4 4 1 7
1 1 4 0
0 5 4 2
3 3 1 6
3 1 0 3
1 3 4 1
1 2 3 1
2 1 3 5
0 0 1 7
3 4 2 2
3 6 1 5
2 7 2 7
3 5 1 5
0 4 0 6
3 2 4 7
0 6 1 4
1 0 0 7
3 1 2 0
2 3 4 0
3 1 0 1
3 3 2 0
3 5 4 0
4 7 0 2
1 2 1 0
1 6 2 0
4 2 1 1
0 0 1 1
1 0 1 1
3 7 3 6
2 4 0 1
1 2 2 7
4 3 4 5
4 2 4 6
3 7 3 7
0 7 3 7
4 5 3 3
2 6 1 5
0 3 0 6
4 7 4 7
4 0 4 5
3 4 1 5
0 2 0 7
4 1 3 5
0 5 3 0
0 5 4 5
1 0 2 6
0 4 2 5
1 3 0 3
1 5 0 2
0 0 4 5
3 3 0 5
3 2 3 1
4 1 1 0
2 4 4 1
0 6 4 1
1 1 2 3
4 6 4 3
0 5 0 0
0 4 0 2
2 3 0 4
4 7 1 5
1 6 0 5
1 7 4 2
0 2 0 4
3 5 3 0
4 6 4 1
4 6 3 1
0 0 1 6
4 2 1 6
3 1 1 4
4 7 1 3
1 6 4 0
2 5 2 3
0 2 2 1
3 7 2 0
1 0 4 7
3 5 3 4
0 0 4 6
1 7 1 1
3 5 4 5
3 3 3 7
2 2 2 7
4 2 4 3
3 6 4 0
3 5 3 6
4 6 1 5
2 7 0 3
3 3 4 4
4 2 3 4
3 1 1 3
2 0 4 0
2 3 2 1
1 7 4 0
2 3 2 4
0 4 1 2
1 7 1 4
2 6 3 4
1 3 2 4
1 4 2 3
1 4 1 2
2 0 2 5
0 7 1 0
2 7 0 1
4 1 3 0
4 1 1 5
3 1 3 6
4 4 2 3
3 0 0 1
2 4 4 5
3 1 1 2
4 3 1 6
4 0 3 5
2 4 1 0
1 3 4 4
1 1 1 2
2 6 4 0
0 6 4 4
1 0 4 4
0 4 3 4
4 5 1 2
1 1 4 7
3 2 2 5
4 7 1 2
3 7 0 0
4 4 4 1
2 7 1 3
1 0 0 1
2 1 4 7
2 0 0 5
4 6 2 3
2 5 0 7
1 6 3 3
2 6 1 7
0 1 2 1
0 7 0 0
2 1 0 3
3 0 3 5
4 3 0 4
4 3 3 7
2 6 2 1
2 4 1 1
2 3 4 5
4 3 0 1
2 2 0 4
3 0 1 3
1 2 1 3
1 7 0 3
3 3 0 0
0 6 0 7
3 1 3 0
3 6 2 6
1 1 1 3
0 5 2 7
0 0 2 3
4 0 2 0
0 1 1 4
0 4 1 6
2 2 2 4
2 0 3 6
0 5 1 0
4 1 1 1
3 6 3 4
4 3 3 2
2 3 2 5
3 1 2 2
4 0 3 0
1 3 0 4
0 7 1 6
0 1 1 0
2 6 1 0
4 2 4 7
0 0 4 0
2 5 0 6
3 5 2 7
3 2 3 6
0 0 3 5
1 2 0 2
1 0 4 6
1 4 4 0
3 4 1 0
0 5 2 1
1 3 2 1
4 7 0 6
4 3 1 1
0 6 1 1
2 2 3 1
2 2 1 0
0 2 3 7
2 0 2 4
4 4 4 6
3 4 2 6
1 0 0 5
4 0 1 3
3 4 1 2
2 1 2 4
1 3 3 7
2 1 1 1
0 0 2 6
\`\`\`

\`\`\`output1
23333
\`\`\`

## 样例说明 1

23322，23332，23333 均是合法方案。

## 数据规模与约定

对于 $100\\%$ 的数据，$1 \\le n\\le10^5$，$1 \\le m\\le10^6$。
具体特性请自行参考输入数据。

请在右侧文件面板下载输入数据。

## 说明

[Minecraft OI Round 4](https://www.luogu.com.cn/contest/33344) Extra
idea & solution：w33z8kqrqk8zzzx33 check：tiger2005

"
,
  "difficulty": 0,
  "id": "H1022",
  "link": "https://hydro.ac/p/H1022",
  "memoryLimit": 134217728,
  "samples": [
    {
      "input": 
"5 600
0 5 1 4
2 3 2 2
0 4 0 4
1 7 4 7
4 6 1 3
4 2 2 4
2 3 0 7
0 3 2 1
4 4 2 1
2 3 0 6
4 5 0 3
1 2 4 6
2 0 1 4
1 6 2 3
2 2 0 6
4 3 1 7
3 6 2 5
3 0 2 6
3 7 1 7
1 2 2 2
1 7 3 7
2 6 4 2
3 0 2 3
1 1 2 0
2 1 2 3
0 5 3 3
4 0 1 1
0 5 3 7
2 6 0 4
3 1 4 3
1 1 2 5
3 6 0 2
0 4 3 1
1 7 2 4
3 4 3 3
1 0 3 7
3 5 0 2
0 4 0 1
3 0 3 6
4 2 0 5
3 3 1 7
1 5 2 3
4 5 0 0
3 0 1 5
1 5 0 3
2 0 2 1
2 6 3 6
2 4 3 2
1 2 2 5
2 1 0 5
1 2 4 1
2 7 4 6
0 5 0 6
3 6 2 2
1 7 1 7
0 1 4 4
1 6 0 2
1 6 1 0
1 4 0 7
0 7 4 5
0 4 2 1
3 7 0 7
3 0 2 1
3 3 3 6
0 2 1 0
0 6 2 2
4 1 2 0
2 7 1 6
1 0 2 1
4 3 3 0
0 7 3 5
1 3 3 5
3 0 4 0
4 6 1 4
2 3 2 7
1 0 3 2
0 3 3 7
0 2 1 2
3 1 0 6
0 1 2 7
3 4 3 0
4 7 3 6
2 5 4 3
3 4 0 7
2 0 0 2
1 4 1 6
0 7 0 3
2 4 2 4
2 2 2 1
4 2 0 4
2 7 3 4
4 6 0 6
2 4 0 4
2 2 1 1
4 7 0 1
4 0 1 0
1 1 1 1
3 4 2 4
0 4 1 0
0 0 0 3
3 3 2 5
1 0 4 0
3 3 2 1
3 7 4 6
0 1 1 2
3 4 0 3
1 1 2 7
2 7 1 7
1 5 4 4
4 4 3 0
2 2 0 3
0 1 0 6
1 2 2 0
0 4 0 5
3 0 0 2
3 6 2 7
1 4 2 1
1 6 3 7
3 1 2 5
2 0 1 3
1 6 3 6
2 1 0 4
4 5 3 5
4 4 3 2
2 5 2 1
3 6 1 0
4 4 0 3
2 0 0 7
2 4 1 4
3 4 2 0
3 6 0 7
0 5 1 5
0 3 0 1
1 2 3 0
0 1 2 4
4 5 2 7
1 5 4 0
0 4 2 3
0 7 3 1
2 5 0 1
3 1 2 3
2 6 2 5
2 1 3 2
3 1 2 6
0 2 4 5
2 7 4 1
0 0 4 7
1 6 1 7
4 4 3 7
1 5 3 7
2 3 0 5
3 0 1 4
3 0 4 6
2 5 4 2
2 7 2 3
0 1 2 6
1 7 0 2
1 1 4 6
3 0 0 4
2 5 3 0
4 6 0 0
2 4 2 3
0 3 4 1
4 5 4 5
1 5 4 3
0 5 4 1
0 3 0 4
4 5 3 0
3 2 1 4
2 6 2 2
0 6 3 6
4 2 1 0
2 1 2 0
3 4 4 7
2 1 2 1
0 5 2 4
2 7 4 3
4 7 1 6
3 6 0 3
0 1 3 4
2 6 2 4
2 2 2 3
4 5 1 5
1 4 0 6
2 6 4 1
2 0 2 7
4 5 2 4
2 7 4 4
3 7 3 2
2 5 1 2
0 2 4 1
4 7 3 4
0 1 1 3
4 1 1 6
1 1 1 4
2 7 1 2
1 4 0 0
2 0 4 2
0 3 2 7
2 5 2 6
0 5 4 4
4 0 2 3
2 4 0 3
4 5 2 1
4 4 4 0
2 5 3 6
3 1 4 5
1 6 4 7
0 2 3 4
0 1 4 7
1 5 3 4
0 6 1 0
2 7 2 2
0 4 2 4
4 2 2 7
4 5 2 3
0 3 1 1
0 3 4 0
0 4 2 7
0 3 2 0
3 0 1 7
0 1 1 1
3 4 0 4
2 3 1 6
4 4 0 2
4 2 2 5
4 4 4 5
1 1 2 4
1 1 0 1
0 7 2 5
0 5 1 3
3 2 4 6
4 0 0 4
3 1 3 2
2 3 1 2
0 1 1 5
4 5 3 7
2 0 3 3
0 2 0 3
1 5 3 1
1 4 2 4
1 5 1 1
1 0 1 4
0 7 2 1
0 5 0 2
3 4 1 3
1 7 3 0
3 3 4 5
3 5 4 2
3 4 3 6
3 4 3 7
3 4 3 4
1 7 2 3
4 4 4 2
1 7 4 4
1 3 1 6
4 3 4 2
1 5 2 1
1 5 2 2
2 5 4 5
1 5 2 4
3 6 0 5
3 2 0 6
4 4 1 4
4 0 4 0
0 4 4 3
2 4 3 5
4 1 3 6
2 4 4 3
4 3 2 0
3 5 3 1
1 7 0 6
0 2 4 7
3 0 0 3
1 4 0 2
4 5 1 7
3 1 0 4
0 1 0 2
4 1 1 3
0 3 3 3
2 2 4 2
4 3 4 1
4 5 2 0
1 6 2 6
1 1 2 1
4 6 2 2
1 7 2 0
0 4 3 0
0 3 2 5
2 2 3 0
3 6 2 3
0 7 3 3
0 5 0 4
3 7 1 5
4 5 0 5
4 1 0 4
1 7 0 7
3 4 1 7
0 0 2 5
1 3 3 0
2 1 3 0
2 6 0 3
0 5 1 7
0 6 1 6
1 1 0 5
2 7 2 5
0 3 4 5
4 0 3 1
3 2 1 0
2 6 0 2
1 4 3 7
1 6 2 5
1 4 4 4
3 5 4 4
1 1 4 3
2 1 1 3
4 2 1 7
4 6 1 0
1 0 3 4
1 1 3 1
1 6 0 6
3 7 1 1
0 0 2 4
4 0 1 5
0 2 2 2
2 0 1 5
1 0 4 5
3 0 1 2
0 1 0 1
0 3 0 2
4 7 3 2
4 4 3 3
1 5 4 7
2 2 0 2
2 4 0 7
4 1 1 4
4 5 4 2
4 4 1 1
1 7 1 2
3 2 3 5
3 6 1 7
4 1 2 2
1 1 3 5
3 1 2 4
3 1 4 0
4 6 0 5
1 5 3 5
3 1 2 1
3 0 3 4
4 4 4 4
1 5 1 0
4 0 4 3
1 4 3 3
4 7 4 0
4 5 4 1
1 5 3 2
0 6 0 1
0 6 3 7
1 3 1 4
4 0 1 4
2 1 3 3
4 1 2 6
1 0 1 3
4 7 0 4
0 0 0 0
2 5 1 0
2 3 0 0
1 6 1 2
0 2 0 5
3 7 4 5
2 3 1 4
2 3 3 1
0 2 3 1
4 7 3 0
4 5 4 0
3 3 4 7
3 4 0 2
2 7 4 2
3 0 4 7
3 0 0 0
0 4 4 7
1 4 3 5
1 1 4 2
2 3 1 0
1 0 0 2
1 1 1 0
3 5 4 3
0 6 4 3
4 4 0 5
4 4 1 0
4 3 1 2
2 4 4 0
0 5 4 0
0 0 4 1
4 2 3 7
4 5 2 5
3 7 1 4
2 1 0 6
3 1 0 5
1 3 2 7
1 3 4 7
1 4 2 5
4 4 1 7
1 1 4 0
0 5 4 2
3 3 1 6
3 1 0 3
1 3 4 1
1 2 3 1
2 1 3 5
0 0 1 7
3 4 2 2
3 6 1 5
2 7 2 7
3 5 1 5
0 4 0 6
3 2 4 7
0 6 1 4
1 0 0 7
3 1 2 0
2 3 4 0
3 1 0 1
3 3 2 0
3 5 4 0
4 7 0 2
1 2 1 0
1 6 2 0
4 2 1 1
0 0 1 1
1 0 1 1
3 7 3 6
2 4 0 1
1 2 2 7
4 3 4 5
4 2 4 6
3 7 3 7
0 7 3 7
4 5 3 3
2 6 1 5
0 3 0 6
4 7 4 7
4 0 4 5
3 4 1 5
0 2 0 7
4 1 3 5
0 5 3 0
0 5 4 5
1 0 2 6
0 4 2 5
1 3 0 3
1 5 0 2
0 0 4 5
3 3 0 5
3 2 3 1
4 1 1 0
2 4 4 1
0 6 4 1
1 1 2 3
4 6 4 3
0 5 0 0
0 4 0 2
2 3 0 4
4 7 1 5
1 6 0 5
1 7 4 2
0 2 0 4
3 5 3 0
4 6 4 1
4 6 3 1
0 0 1 6
4 2 1 6
3 1 1 4
4 7 1 3
1 6 4 0
2 5 2 3
0 2 2 1
3 7 2 0
1 0 4 7
3 5 3 4
0 0 4 6
1 7 1 1
3 5 4 5
3 3 3 7
2 2 2 7
4 2 4 3
3 6 4 0
3 5 3 6
4 6 1 5
2 7 0 3
3 3 4 4
4 2 3 4
3 1 1 3
2 0 4 0
2 3 2 1
1 7 4 0
2 3 2 4
0 4 1 2
1 7 1 4
2 6 3 4
1 3 2 4
1 4 2 3
1 4 1 2
2 0 2 5
0 7 1 0
2 7 0 1
4 1 3 0
4 1 1 5
3 1 3 6
4 4 2 3
3 0 0 1
2 4 4 5
3 1 1 2
4 3 1 6
4 0 3 5
2 4 1 0
1 3 4 4
1 1 1 2
2 6 4 0
0 6 4 4
1 0 4 4
0 4 3 4
4 5 1 2
1 1 4 7
3 2 2 5
4 7 1 2
3 7 0 0
4 4 4 1
2 7 1 3
1 0 0 1
2 1 4 7
2 0 0 5
4 6 2 3
2 5 0 7
1 6 3 3
2 6 1 7
0 1 2 1
0 7 0 0
2 1 0 3
3 0 3 5
4 3 0 4
4 3 3 7
2 6 2 1
2 4 1 1
2 3 4 5
4 3 0 1
2 2 0 4
3 0 1 3
1 2 1 3
1 7 0 3
3 3 0 0
0 6 0 7
3 1 3 0
3 6 2 6
1 1 1 3
0 5 2 7
0 0 2 3
4 0 2 0
0 1 1 4
0 4 1 6
2 2 2 4
2 0 3 6
0 5 1 0
4 1 1 1
3 6 3 4
4 3 3 2
2 3 2 5
3 1 2 2
4 0 3 0
1 3 0 4
0 7 1 6
0 1 1 0
2 6 1 0
4 2 4 7
0 0 4 0
2 5 0 6
3 5 2 7
3 2 3 6
0 0 3 5
1 2 0 2
1 0 4 6
1 4 4 0
3 4 1 0
0 5 2 1
1 3 2 1
4 7 0 6
4 3 1 1
0 6 1 1
2 2 3 1
2 2 1 0
0 2 3 7
2 0 2 4
4 4 4 6
3 4 2 6
1 0 0 5
4 0 1 3
3 4 1 2
2 1 2 4
1 3 3 7
2 1 1 1
0 0 2 6"
,
      "output": "23333",
    },
  ],
  "tags": [
    "提交答案",
  ],
  "timeLimit": 5000,
  "title": "「MCOI-04」Dream SMP",
  "type": "submission",
}
`;

exports[`Hydro platform should fetch problem w/ domain 1`] = `
{
  "description": 
"## 题目描述

**这是一道交互测试题。**

给定 $n$ 枚编号为 $1 \\sim n$ 的硬币，其中有 $1$ 枚硬币较为特殊，每次你可以选择一枚硬币进行询问。对于正常的硬币询问时有 $50\\%$ 的概率返回 $1$，$50\\%$ 的概率返回 $0$；对于特殊的硬币询问时有 $40\\%$ 的概率返回 $1$，$60\\%$ 的概率返回 $0$。请你找出这枚特殊硬币。

由于这是交互测试题，所以对于交互数量没有严格限制，但你不应当进行 $10^5$ 以上次的询问。

你可以调用 \`coin.h\` 进行交互，具体地，交互命令有以下三种。

\`int getn()\` 返回一个不超过 $100$ 的整数，表示 $n$。你应当在程序一开始调用此函数，并仅调用一次。

\`int query(int x)\` 询问第 $x$ 枚硬币，返回值见题目描述。

\`void submit(int x)\` 提交你的答案，即第 $x$ 枚硬币是特殊的。在此之后你不应当进行任何交互操作。

## 数据规模与约定

交互库请从 [附件](./1/file/coin.h) 下载，不保证其实现一定与评测时采用的交互库相同。

**注意：** 此题暂时仅支持 C++。
"
,
  "difficulty": 0,
  "id": undefined,
  "link": "https://hydro.ac/d/system_test/p/1",
  "memoryLimit": 268435456,
  "samples": [],
  "tags": [
    "系统测试",
  ],
  "timeLimit": 100,
  "title": "函数交互测试",
  "type": "traditional",
}
`;

exports[`Hydro platform should fetch problem w/ i18n 1`] = `
{
  "description": 
"## Description

Input two numbers $a$ and $b$, print $a + b$.

## Input Format

Two integers $a$ and $b$.

## Output Format

One integer, $a + b$.

\`\`\`input1
1 2
\`\`\`

\`\`\`output1
3
\`\`\`

## Limit and hint

For $100\\%$ testcases, $a, b \\leq 10 ^ 6$.

"
,
  "difficulty": 1,
  "id": "H1000",
  "link": "https://hydro.ac/p/H1000?lang=en",
  "memoryLimit": 1073741824,
  "samples": [
    {
      "input": "1 2",
      "output": "3",
    },
  ],
  "tags": [
    "系统测试",
  ],
  "timeLimit": 1000,
  "title": "A + B Problem",
  "type": "traditional",
}
`;
